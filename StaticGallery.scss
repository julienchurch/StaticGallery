// README 
// =======
// The staticGallery mixin provides a gallery with fixed-dimension columns.
// Because the dimensions are concretely set, breakpoints are auto-generated
// against a maximum width value.

// USE
// ===
// Simply create a parent <div> or similar element with the class "gallery"
// and insert into it as many "gallery-item"-classed elements as you need.

// IMPORTANT CAVEATS
// =================
// 1) The staticGallery mixin will only work if its $galleryMaxWidth parameter
// truly reflects its max width. Constraints imposed by parent elements (e.g.,
// a margin on <body>) cannot be detected through Sass alone and will cause 
// undesirable behavior. Because I feel that including a JavaScript file along
// with this mixin is overkill: be aware of what you're doing! 
// 2) Though it's called a "gallery," this code makes no assumptions about
// the contents of its gallery items, and tries to use the bare minimum set of
// rules it can get away with. Images are not treated specially, row heights are
// not enforced, etc. This is a deliberate attempt to create a system that is
// extensible, intuitive, and non-magical. As such, cascading over it in your
// source .scss files should work as expected, according to what you already
// know about CSS.

// BEHAVIOR RATIONALE
// ==================
// As stated above, this code auto-generates its own ideal breakpoints.
// If you prefer the code to replicate your current breakpoints, you're going to
// have to determine the suitable column dimensions to do so. It doesn't make
// sense to enforce arbitrary breakpoints on a gallery with statically-sized
// columns; the breakpoints won't match up with the widths of the columns and
// you'll end up with a lot of wasted space.

// PARAMETERS 
// ===================
//   $columnWidth
//     The width that each column (and thereby each gallery item) should be.
//   $gutterVertical
//     The margin between columns.
//   $gutterHorizontal
//     The margin between rows.
//   $galleryPadding
//     The amount of padding on each side of the gallery. Top and bottom
//     padding are unimportant to this calculation and should be set outside
//     this API.
//   $galleryMaxWidth
//     The maximum width that you wish the gallery to support. Any viewport size
//     beyond this width will be ignored.
@mixin staticGallery( $columnWidth
                    , $gutterVertical
                    , $gutterHorizontal
                    , $galleryPadding
                    , $galleryMaxWidth: 1200px 
                    , $class: () ) {

  // HELPERS
  // =======

  @function stripUnit( $number ) {
    @return $number / ( $number * 0 + 1 );
  }

  @function getBreakpoints( $maxColumns
                          , $columnWidth
                          , $gutterVertical
                          , $galleryPadding ) {
    @if $maxColumns > 0 {
          // The (+20) dangling at the end of $breakpoint compensates for the
          // width of a scroll bar. Scrollbars are usually ~17px, so the extra
          // 3px are there for safety/ease of mental math
        $breakpoint: $maxColumns * 
                     ( $columnWidth + $gutterVertical ) - $gutterVertical +
                     ( $galleryPadding * 2 ) + 20;
        @return append(getBreakpoints( $maxColumns - 1
                                     , $columnWidth
                                     , $gutterVertical
                                     , $galleryPadding )
                                     , $breakpoint );
    }
      // Base case; returns an empty list to concatenate with the call above.
    @return (); 
  }

  $galleryTrueWidth: $galleryMaxWidth - ( $galleryPadding * 2 );
  $maxColumns: floor(stripUnit( $galleryTrueWidth + $gutterVertical ) /
               stripUnit( $columnWidth + $gutterVertical ) );
  $breakpoints: getBreakpoints( $maxColumns
                              , $columnWidth
                              , $gutterVertical
                              , $galleryPadding );
  @if $class == () {
    $class: #{ & + "__gallery-item" };
  }


    position: relative;
    display: inline-block;
    box-sizing: border-box;
    max-width: $galleryMaxWidth;
    left: 50%;
    padding-left: $galleryPadding;
    padding-right: $galleryPadding;
    transform: translateX(-50%);
    &:after {
      content: "";
      display: table;
      clear: both;
    }
    #{ $class }{
      position: relative;
      display: inline-block;
      float: left;
      width: 100%;
      margin-bottom: $gutterHorizontal;
    }
    // Media queries
    @each $bp in $breakpoints {
      $i: index($breakpoints, $bp);
      @media screen and (min-width: #{$bp}) {
        #{ $class } {
          width: $columnWidth;
            @if not($i == 1) {
              $p: $i - 1;
              &:nth-of-type(#{$p + "n"} + 1) {
              clear: none;
              margin-left: $gutterVertical;
            }
          }
        &:nth-of-type(#{$i + "n"} + 1) {
          clear: left;
          margin-left: 0;
        }
      }
    }
  }
}

